AWSTemplateFormatVersion: "2010-09-09"
Description: "Day 5 â€“ SSM bootstrap doc (Flask+Gunicorn+Nginx+CW Agent), KMS-encrypted log group"

Parameters:
  ProjectName:
    Type: String
    Default: secure-webapp
  AppPort:
    Type: Number
    Default: 8000
  LogGroupName:
    Type: String
    Default: /secure-webapp/app

Resources:
  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS key for ${ProjectName} CloudWatch Logs"
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAccountRootFullAccess
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"

  LogsKmsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-cw-logs"
      TargetKeyId: !Ref LogsKmsKey

  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 30
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Env
          Value: dev

  AppBootstrapDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: !Sub "${ProjectName}-bootstrap"
      TargetType: /AWS::EC2::Instance
      Content:
        schemaVersion: "2.2"
        description: "Install Python/Gunicorn, configure systemd app, Nginx reverse proxy, CloudWatch agent"
        mainSteps:
          - name: Bootstrap
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 3600
              runCommand:
                - |
                  #!/bin/bash
                  set -euo pipefail
                  yum update -y
                  yum install -y python3 python3-pip nginx unzip amazon-cloudwatch-agent
                  systemctl enable amazon-ssm-agent || true
                  systemctl start amazon-ssm-agent || true

                  install -d -m 0755 /opt/app/app
                  install -d -m 0755 /opt/app/log
                  python3 -m pip install --upgrade pip
                  pip3 install flask gunicorn

                  cat >/opt/app/app/app.py <<'PY'
                  from flask import Flask, jsonify
                  app = Flask(__name__)
                  @app.after_request
                  def secure_headers(resp):
                      resp.headers["X-Frame-Options"] = "DENY"
                      resp.headers["X-Content-Type-Options"] = "nosniff"
                      resp.headers["Referrer-Policy"] = "no-referrer"
                      resp.headers["Content-Security-Policy"] = "default-src 'self'"
                      return resp
                  @app.get("/health")
                  def health():
                      return "OK", 200
                  @app.get("/")
                  def index():
                      return jsonify(message="hello from private ec2"), 200
                  PY

                  cat >/etc/systemd/system/app.service <<'UNIT'
                  [Unit]
                  Description=Gunicorn Flask App
                  After=network-online.target
                  Wants=network-online.target
                  [Service]
                  Type=simple
                  User=root
                  WorkingDirectory=/opt/app/app
                  ExecStart=/usr/local/bin/gunicorn -b 127.0.0.1:${APP_PORT} app:app --access-logfile /opt/app/log/app-access.log
                  Restart=always
                  RestartSec=2s
                  LimitNOFILE=65536
                  [Install]
                  WantedBy=multi-user.target
                  UNIT

                  cat >/etc/nginx/conf.d/app.conf <<CONF
                  server {
                      listen 80 default_server;
                      server_name _;
                      add_header X-Frame-Options "DENY";
                      add_header X-Content-Type-Options "nosniff";
                      add_header Referrer-Policy "no-referrer";
                      location / {
                          proxy_pass http://127.0.0.1:${APP_PORT};
                          proxy_set_header Host \$host;
                          proxy_set_header X-Real-IP \$remote_addr;
                          proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto \$scheme;
                      }
                      location /health { proxy_pass http://127.0.0.1:${APP_PORT}/health; }
                  }
                  CONF
                  nginx -t
                  systemctl enable nginx
                  systemctl restart nginx

                  cat >/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<CW
                  {
                    "logs": {
                      "logs_collected": {
                        "files": {
                          "collect_list": [
                            { "file_path": "/var/log/nginx/access.log", "log_group_name": "${LOG_GROUP}", "log_stream_name": "{instance_id}/nginx-access" },
                            { "file_path": "/var/log/nginx/error.log",  "log_group_name": "${LOG_GROUP}", "log_stream_name": "{instance_id}/nginx-error" },
                            { "file_path": "/opt/app/log/app-access.log","log_group_name": "${LOG_GROUP}", "log_stream_name": "{instance_id}/app" }
                          ]
                        }
                      }
                    }
                  }
                  CW
                  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop || true
                  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                    -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

                  systemctl daemon-reload
                  systemctl enable app.service
                  systemctl restart app.service
              env:
                APP_PORT: !Ref AppPort
                LOG_GROUP: !Ref LogGroupName
