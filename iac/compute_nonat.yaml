AWSTemplateFormatVersion: '2010-09-09'
Description: Secure Web App - Compute (Dev Mode - Public Subnet)

Parameters:
  ProjectName:
    Type: String
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  AppSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  InstanceType:
    Type: String
    Default: t3.micro
  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0c1bc246476a5572b  # Amazon Linux 2 (eu-west-1) â€“ update as needed

Resources:
  # NEW: KMS key for log encryption
  LogKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS key for ${ProjectName} CloudWatch Logs"
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowRoot
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
      Tags:
        - { Key: Project, Value: !Ref ProjectName }
        - { Key: Env, Value: dev }

  LogKmsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-logs"
      TargetKeyId: !Ref LogKmsKey

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${ProjectName}/app"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LogKmsKey.Arn   # <-- add this
      Tags:
        - { Key: Project, Value: !Ref ProjectName }
        - { Key: Env, Value: dev }

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref InstanceRole ]

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetId
      SecurityGroupIds: [ !Ref AppSecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AmiId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras enable python3.8
          yum install -y python3.8 python3-pip nginx
          pip3 install flask gunicorn
          mkdir -p /opt/app
          cat <<'EOF' > /opt/app/app.py
          from flask import Flask
          app = Flask(__name__)
          @app.route("/health")
          def health():
              return "OK"
          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=8000)
          EOF
                    cat <<'EOF' > /etc/systemd/system/flaskapp.service
          [Unit]
          Description=Gunicorn instance to serve Flask app
          After=network.target

          [Service]
          User=root
          WorkingDirectory=/opt/app
          ExecStart=/usr/local/bin/gunicorn -w 2 -b 0.0.0.0:8000 app:app
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF
                    systemctl daemon-reload
                    systemctl enable flaskapp
                    systemctl start flaskapp

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  PublicIp:
    Value: !GetAtt EC2Instance.PublicIp
  PublicDns:
    Value: !GetAtt EC2Instance.PublicDnsName
